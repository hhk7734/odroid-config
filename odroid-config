#!/bin/sh

if [ "$(id -u)" -ne 0 ]; then
    printf "Must run as root privileges. Try 'sudo odroid-config'\n"
    exit 1
fi

if [ "x${SUDO_USER}" = "x" ]; then
    export SUDO_USER=root
fi

calc_wt_size()
{
    # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
    # output from tput. However in this case, tput detects neither stdout or 
    # stderr is a tty and so only gives default 80, 24 values

    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 80 ]; then
        WT_WIDTH=80
    fi
    if [ "$WT_WIDTH" -gt 120 ]; then
        WT_WIDTH=120
    fi

    WT_MENU_HEIGHT=$((WT_HEIGHT-7))
}

###########################################################
# GLOBAL VARIABLES
ASK_TO_REBOOT=0
calc_wt_size
BOOT_INI=/media/boot/boot.ini
CONFIG_VERSION=$(dpkg -s odroid-config 2>/dev/null | grep Version \
                 | sed 's/Version: \([0-9|.]*\).*$/\1/')
CONFIG_TITLE="ODROID Configuration Tool v$CONFIG_VERSION"
# GLOBAL VARIABLES
###########################################################

[ "x${DEVICE}" = "x" ] && DEVICE="$(cat /proc/device-tree/model)"
case "$DEVICE" in
    "AMLOGIC")
        MODEL=c1
        DEVICE="Hardkernel ODROID C0/C1+"
        ;;
    "ODROID-C2")
        MODEL=c2
        DEVICE="Hardkernel ODROID C2"
        ;;
    "Hardkernel ODROID-N2")
        MODEL=n2
        DEVICE="Hardkernel ODROID N2"
        ;;
    "Hardkernel Odroid XU4")
        MODEL=xu4
        DEVICE="Hardkernel ODROID XU4"
        ;;
    *)
        whiptail --yesno "Unsupported device. Some menus are not available. Would you like to continue?" 20 60 2
        if [ $? -eq 1 ]; then
            # No
            exit 1
        fi
        DEVICE="Unsupported device"
        ;;
esac

readonly MODEL
readonly DEVICE

do_finish()
{
    if [ $ASK_TO_REBOOT -eq 1 ]; then
        whiptail --yesno "Would you like to reboot now?" 20 60
        BUTTON=$?
        if [ $BUTTON -eq 0 ]; then
            # Yes
            sync
            reboot
        fi
    fi
    exit 0
}

exist_in_the_shell()
{
    command -V "$1" 2>/dev/null | grep -q shell
}

is_installed()
{
    [ -n "$(command -v "$1" 2>/dev/null)" ]
}

exist_in()
{
    [ -n "$(find "$1" -name "$2" 2>/dev/null)" ]
}

loadModule() {
    # remove $1 from /etc/modules
    sed -e ':a' -e 'N' -e '$!ba' -e "s/\n$1//g" -i /etc/modules
    # add $1 into /etc/modules
    echo "$1" | tee -a /etc/modules
    # load module
    modprobe "$1"
}

unLoadModule() {
    # remove $1 from /etc/modules
    sed -e ':a' -e 'N' -e '$!ba' -e "s/\n$1//g" -i /etc/modules
    # unload module
    modprobe -r "$1"
}

###########################################################
# CALL MODEL-SPECIFIC FUNCTIONS
###########################################################

# shellcheck source=/dev/null
. /usr/lib/odroid-config/models/${MODEL}/functions

###########################################################
# CHANGE USER PASSWORD
###########################################################

do_change_user_password()
{
    whiptail --msgbox "You will now be asked to enter a new password for the $SUDO_USER user" 20 60
    passwd "$SUDO_USER" &&
    whiptail --msgbox "Password changed successfully" 20 60
}

###########################################################
# BOOT OPTIONS
###########################################################

do_console()
{
     # Console
    systemctl set-default multi-user.target
    ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
    if [ -e /etc/systemd/system/getty@tty1.service.d/autologin.conf ];then
        rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
    fi
    ASK_TO_REBOOT=1
}

do_console_autologin()
{
    # Console Autologin
    systemctl set-default multi-user.target
    ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
    if [ ! -e /etc/systemd/system/getty@tty1.service.d ]; then
        mkdir -p /etc/systemd/system/getty@tty1.service.d
    fi
    cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $SUDO_USER --noclear %I \$TERM
EOF
    ASK_TO_REBOOT=1
}

do_desktop()
{
    # Desktop
    if [ -e /etc/init.d/lightdm ]; then
        systemctl set-default graphical.target

        if [ ! -e /etc/lightdm/lightdm.conf ]; then
            cat > /etc/lightdm/lightdm.conf << EOF
[SeatDefaults]
autologin-user=
autologin-user-timeout=0
EOF
        fi
        sed /etc/lightdm/lightdm.conf -i -e "s/^autologin-user=.*/#autologin-user=/"
        ASK_TO_REBOOT=1
    else
        whiptail --msgbox "Do 'sudo apt install lightdm' to allow configuration of boot to desktop" 20 60
        return 1
    fi
}

do_desktop_autologin()
{
    # Desktop Autologin
    if [ -e /etc/init.d/lightdm ]; then
        systemctl set-default graphical.target

        if [ ! -e /etc/lightdm/lightdm.conf ]; then
            cat > /etc/lightdm/lightdm.conf << EOF
[SeatDefaults]
autologin-user=
autologin-user-timeout=0
EOF
        fi
        sed /etc/lightdm/lightdm.conf -i -e "s/^\(#\|\)autologin-user=.*/autologin-user=$SUDO_USER/"
        ASK_TO_REBOOT=1
    else
        whiptail --msgbox "Do 'sudo apt install lightdm' to allow configuration of boot to desktop" 20 60
        return 1
    fi
}

do_boot_options()
{
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Console" "Text console, requiring user to login" \
        "2 Console Autologin" "Text console, automatically logged in as '$SUDO_USER' user" \
        "3 Desktop" "Desktop GUI, requiring user to login" \
        "4 Desktop Autologin" "Desktop GUI, automatically logged in as '$SUDO_USER' user" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1*) do_console ;;
            2*) do_console_autologin ;;
            3*) do_desktop ;;
            4*) do_desktop_autologin ;;
            *) whiptail --msgbox "Programmer error, unrecognised boot option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    fi
}

###########################################################
# LOCALIZATION OPTIONS
###########################################################

do_change_keyboard_layout()
{
    printf "Reloading keymap. This may take a short while\n"
    dpkg-reconfigure keyboard-configuration
    invoke-rc.d keyboard-setup start
    setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1'
    udevadm trigger --subsystem-match=input --action=change
    return 0
}

do_localization_options()
{
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Localization Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Change Locale" "Set up language and regional settings to match your location" \
        "2 Change Timezone" "Set up timezone to match your location" \
        "3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) dpkg-reconfigure locales ;;
            2\ *) dpkg-reconfigure tzdata ;;
            3\ *) do_change_keyboard_layout ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    fi
}

###########################################################
# INTERFACING OPTIONS
###########################################################

do_ssh()
{
    if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
        whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60
        return 1
    fi

    DEFAULT=--defaultno
    if [ "$(systemctl is-active ssh)" = "active" ]; then
        DEFAULT=
    fi

    whiptail --yesno "Would you like the SSH server to be enabled?" $DEFAULT 20 60
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        ssh-keygen -A &&
        update-rc.d ssh enable &&
        invoke-rc.d ssh start &&
        whiptail --msgbox "The SSH server is enabled" 20 60
    elif [ $BUTTON -eq 1 ]; then
        update-rc.d ssh disable &&
        invoke-rc.d ssh stop &&
        whiptail --msgbox "The SSH server is disabled" 20 60
    fi
}

do_vnc()
{
    whiptail --msgbox "This option is not supported." 20 60
}

if ! exist_in_the_shell do_spi; then
    do_spi()
    {
        whiptail --msgbox "This option is not supported." 20 60
    }
fi

if ! exist_in_the_shell do_i2c; then
    do_i2c()
    {
        whiptail --msgbox "This option is not supported." 20 60
    }
fi

if ! exist_in_the_shell do_serial; then
    do_serial()
    {
        whiptail --msgbox "This option is not supported." 20 60
    }
fi

if ! exist_in_the_shell do_onewire; then
    do_onewire()
    {
        whiptail --msgbox "This option is not supported." 20 60
    }
fi

do_interfacing_options()
{
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Interfacing Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 SSH" "Enable/Disable remote command line access to your Odroid using SSH" \
        "2 VNC" "Enable/Disable graphical remote access to your Odroid using VNC" \
        "3 SPI" "Enable/Disable SPI interface" \
        "4 I2C" "Enable/Disable I2C interface" \
        "5 Serial" "Enable/Disable Serial(UART) interface" \
        "6 1-Wire" "Enable/Disable 1-Wire interface" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) do_ssh ;;
            2\ *) do_vnc ;;
            3\ *) do_spi ;;
            4\ *) do_i2c ;;
            5\ *) do_serial ;;
            6\ *) do_onewire ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    fi
}

###########################################################
# ADVANCED OPTIONS
###########################################################

if ! exist_in_the_shell do_resolution; then
    do_resolution()
    {
        whiptail --msgbox "This option is not supported." 20 60
    }
fi

do_advanced_options()
{
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Resolution" "Set a specific screen resolution" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) do_resolution ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    fi
}

###########################################################
# LAB
###########################################################

do_daily_apt_update()
{
    DEFAULT=--defaultno
    if [ "$(systemctl is-enabled apt-daily.timer)" = "enabled" ]; then
        DEFAULT=
    fi

    whiptail --yesno "Would you like the daily apt upgrade to be enabled?" $DEFAULT 20 60
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        # Yes
        systemctl enable apt-daily.timer
        systemctl start apt-daily.timer
        systemctl enable apt-daily-upgrade.timer
        systemctl start apt-daily-upgrade.timer
        whiptail --msgbox "The daily apt upgrade is enabled" 20 60
    elif [ $BUTTON -eq 1 ]; then
        # No
        systemctl disable apt-daily.timer
        systemctl stop apt-daily.timer
        systemctl stop apt-daily.service
        systemctl disable apt-daily-upgrade.timer
        systemctl stop apt-daily-upgrade.timer
        systemctl stop apt-daily-upgrade.service
        whiptail --msgbox "The daily apt upgrade is disabled" 20 60
    fi
}

do_wiringpi_installation()
{
    whiptail --yesno "Would you like to install wiringPi?" $DEFAULT 20 60
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        # Yes
        if ! is_installed git; then
            apt install -y git
        fi
        if [ -e /tmp/wiringPi ]; then
            rm -r /tmp/wiringPi
        fi
        git clone https://github.com/hardkernel/wiringPi /tmp/wiringPi &&
        cd /tmp/wiringPi &&
        ./build &&
        whiptail --msgbox "The wiringPi for Odroid has been installed." 20 60
    fi
}

do_samba_server_installation()
{
    whiptail --yesno "Would you like to install Samba server?" $DEFAULT 20 60
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        # Yes
        apt install -y samba &&
        smbpasswd -a "$SUDO_USER" &&
        cat > /etc/samba/smb.conf << EOF
[$SUDO_USER]
comment = $SUDO_USER
path = $HOME
valid users = $SUDO_USER
writable = yes
create mask = 0644
directory mask = 0755
EOF
        systemctl restart smbd &&
        whiptail --msgbox "The Samba server has been installed.\n\nAvailable access path: $HOME\nValid user: $SUDO_USER" 20 60
    fi
}

do_laboratory()
{
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Laboratory" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Daily apt upgrade" "Enable/Disable daily apt upgrade" \
        "2 WiringPi installation" "WiringPi installation for Odroid" \
        "3 Samba server installation" "Samba server installation" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) do_daily_apt_update ;;
            2\ *) do_wiringpi_installation ;;
            3\ *) do_samba_server_installation ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    fi
}

###########################################################
# UPDATE
###########################################################

do_update()
{
    whiptail --yesno "Would you like to update odroid-config?" $DEFAULT 20 60
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        apt update

        UPDATE=$(apt list -a odroid-config 2>/dev/null | grep "upgradable to" \
                | sed 's/.*upgradable to: \([0-9|.]*\).*$/\1/')

        if [ "x${UPDATE}" = "x" ]; then
            whiptail --msgbox "This is the latest version. v${CONFIG_VERSION}" 20 60
        else
            apt install -y odroid-config &&
            whiptail --msgbox "The odroid-config has been updated." 20 60 &&
            do_finish
        fi
    fi
}

###########################################################
# MAIN MENU
###########################################################

while true; do
    OPTION=$(whiptail --title "$CONFIG_TITLE" \
        --backtitle "$DEVICE" \
        --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Finish \
        --ok-button Select \
        "1 Change User Password" "Change password for the current user" \
        "2 Network Manager" "Configure network settings" \
        "3 Boot Options" "Configure options for start-up" \
        "4 Localization Options" "Set up language and regional settings to match your location" \
        "5 Interfacing Options" "Configure connections to peripherals" \
        "6 Advanced Options" "Configure advanced settings" \
        "7 Update" "Update this tool to the latest version" \
        "99 Laboratory" "Experimental options" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ] || [ $BUTTON -eq 255 ]; then
        # Finish or ESC
        do_finish
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case $OPTION in
            1\ *) do_change_user_password ;;
            2\ *) nmtui ;;
            3\ *) do_boot_options ;;
            4\ *) do_localization_options ;;
            5\ *) do_interfacing_options ;;
            6\ *) do_advanced_options ;;
            7\ *) do_update ;;
            99\ *) do_laboratory ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60
    else
        exit 1
    fi
done
