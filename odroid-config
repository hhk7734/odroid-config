#!/bin/sh

if [ "$(id -u)" -ne 0 ]; then
    printf "Must run as root privileges. Try 'sudo odroid-config'\n"
    exit 1
fi

readonly ODROID_C1=""
readonly ODROID_C2=""
readonly ODROID_N2="Hardkernel ODROID-N2"
readonly ODROID_XU4="Hardkernel Odroid XU4"

if [ -e /proc/device-tree/model ]; then
    DEVICE="$(cat /proc/device-tree/model)"
fi

###########################################################
# GLOBAL VARIABLES
ASK_TO_REBOOT=0
# GLOBAL VARIABLES
###########################################################

case $DEVICE in
    "$ODROID_N2") . /usr/lib/odroid-config/odroid-config-n2.sh ;;
    "$ODROID_XU4") . /usr/lib/odroid-config/odroid-config-xu4.sh ;;
    *)
        whiptail --yesno "Unsupported device. Some menus are not available. Would you like to continue?" 20 60 2
        if [ $? -eq 1 ]; then
            # No
            exit 1
        fi
        DEVICE="Unsupported device"
        ;;
esac

readonly DEVICE

calc_wt_size()
{
    # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
    # output from tput. However in this case, tput detects neither stdout or 
    # stderr is a tty and so only gives default 80, 24 values

    WT_HEIGHT=17
    WT_WIDTH=$(tput cols)

    if [ -z "$WT_WIDTH" ] || [ "$WT_WIDTH" -lt 80 ]; then
        WT_WIDTH=80
    fi
    if [ "$WT_WIDTH" -gt 120 ]; then
        WT_WIDTH=120
    fi

    WT_MENU_HEIGHT=$((WT_HEIGHT-7))
}

is_defined()
{
    type "$1" > /dev/null
    RET=$?
    if [ $RET -eq 0 ]; then
        # defined
        echo 0
    else
        # not defined
        echo 1
    fi
}

do_finish()
{
    if [ $ASK_TO_REBOOT -eq 1 ]; then
        whiptail --yesno "Would you like to reboot now?" 20 60 2
        BUTTON=$?
        if [ $BUTTON -eq 0 ]; then
            # Yes
            sync
            reboot
        fi
    fi
    exit 0
}

###########################################################
# CHANGE USER PASSWORD
###########################################################

do_change_user_password()
{
    whiptail --msgbox "You will now be asked to enter a new password for the $SUDO_USER user" 20 60 1
    passwd "$SUDO_USER" &&
    whiptail --msgbox "Password changed successfully" 20 60 1
}

###########################################################
# BOOT OPTIONS
###########################################################

do_boot_options()
{
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Boot Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Console" "Text console, requiring user to login" \
        "2 Console Autologin" "Text console, automatically logged in as '$SUDO_USER' user" \
        "3 Desktop" "Desktop GUI, requiring user to login" \
        "4 Desktop Autologin" "Desktop GUI, automatically logged in as '$SUDO_USER' user" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
        1*)
            # Console
            systemctl set-default multi-user.target
            ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
            if [ -e /etc/systemd/system/getty@tty1.service.d/autologin.conf ];then
                rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
            fi
            ;;
        2*)
            # Console Autologin
            systemctl set-default multi-user.target
            ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
            if [ ! -e /etc/systemd/system/getty@tty1.service.d ]; then
                mkdir -p /etc/systemd/system/getty@tty1.service.d
            fi
            cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $SUDO_USER --noclear %I \$TERM
EOF
            ;;
        3*)
            # Desktop
            if [ -e /etc/init.d/lightdm ]; then
                systemctl set-default graphical.target
                ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
                rm /etc/systemd/system/getty@tty1.service.d/autologin.conf
                sed /etc/lightdm/lightdm.conf -i -e "s/^autologin-user=.*/#autologin-user=/"
            else
                whiptail --msgbox "Do 'sudo apt install lightdm' to allow configuration of boot to desktop" 20 60 2
                return 1
            fi
            ;;
        4*)
            # Desktop Autologin
            if [ -e /etc/init.d/lightdm ]; then
                systemctl set-default graphical.target
                ln -fs /lib/systemd/system/getty@.service /etc/systemd/system/getty.target.wants/getty@tty1.service
                if [ ! -e /etc/systemd/system/getty@tty1.service.d ]; then
                    mkdir -p /etc/systemd/system/getty@tty1.service.d
                fi
                cat > /etc/systemd/system/getty@tty1.service.d/autologin.conf << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty --autologin $SUDO_USER --noclear %I \$TERM
EOF
                sed /etc/lightdm/lightdm.conf -i -e "s/^\(#\|\)autologin-user=.*/autologin-user=$SUDO_USER/"
            else
                whiptail --msgbox "Do 'sudo apt install lightdm' to allow configuration of boot to desktop" 20 60 2
                return 1
            fi
            ;;
        *)
            whiptail --msgbox "Programmer error, unrecognised boot option" 20 60 2
            return 1
            ;;
        esac
        ASK_TO_REBOOT=1
    fi
}

###########################################################
# LOCALISATION OPTIONS
###########################################################

do_change_keyboard_layout()
{
    printf "Reloading keymap. This may take a short while\n"
    dpkg-reconfigure keyboard-configuration
    invoke-rc.d keyboard-setup start
    setsid sh -c 'exec setupcon -k --force <> /dev/tty1 >&0 2>&1'
    udevadm trigger --subsystem-match=input --action=change
    return 0
}

do_localisation_options() {
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Localisation Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 Change Locale" "Set up language and regional settings to match your location" \
        "2 Change Timezone" "Set up timezone to match your location" \
        "3 Change Keyboard Layout" "Set the keyboard layout to match your keyboard" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) dpkg-reconfigure locales ;;
            2\ *) dpkg-reconfigure tzdata ;;
            3\ *) do_change_keyboard_layout ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60 1
    fi
}

###########################################################
# INTERFACING OPTIONS
###########################################################

get_ssh()
{
    if service ssh status | grep -q inactive; then
        echo 1
    else
        echo 0
    fi
}

do_ssh()
{
    if [ -e /var/log/regen_ssh_keys.log ] && ! grep -q "^finished" /var/log/regen_ssh_keys.log; then
        whiptail --msgbox "Initial ssh key generation still running. Please wait and try again." 20 60 2
        return 1
    fi

    DEFAULT=--defaultno
    if [ "$(get_ssh)" -eq 0 ]; then
        DEFAULT=
    fi

    whiptail --yesno "Would you like the SSH server to be enabled?" $DEFAULT 20 60 2
    BUTTON=$?
    if [ $BUTTON -eq 0 ]; then
        ssh-keygen -A &&
        update-rc.d ssh enable &&
        invoke-rc.d ssh start &&
        STATUS=enabled
    elif [ $BUTTON -eq 1 ]; then
        update-rc.d ssh disable &&
        invoke-rc.d ssh stop &&
        STATUS=disabled
    else
        return $BUTTON
    fi

    whiptail --msgbox "The SSH server is $STATUS" 20 60 1
}

get_vnc()
{
    # todo
    :
}

do_vnc()
{
    DEFAULT=--defaultno
    if [ "$(get_vnc)" -eq 0 ]; then
        DEFAULT=
    fi

    # todo
}

if [ ! "$(is_defined do_spi)" -eq 0 ]; then
    do_spi()
    {
        whiptail --msgbox "This option is not supported." 20 60 1
    }
fi

if [ ! "$(is_defined do_i2c)" -eq 0 ]; then
    do_i2c()
    {
        whiptail --msgbox "This option is not supported." 20 60 1
    }
fi

if [ ! "$(is_defined do_serial)" -eq 0 ]; then
    do_serial()
    {
        whiptail --msgbox "This option is not supported." 20 60 1
    }
fi

if [ ! "$(is_defined do_onewire)" -eq 0 ]; then
    do_onewire()
    {
        whiptail --msgbox "This option is not supported." 20 60 1
    }
fi

do_interfacing_options()
{
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Interfacing Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        "1 SSH" "Enable/Disable remote command line access to your Odroid using SSH" \
        "2 VNC" "Enable/Disable graphical remote access to your Odroid using VNC" \
        "3 SPI" "Enable/Disable automatic loading of SPI kernel module" \
        "4 I2C" "Enable/Disable automatic loading of I2C kernel module" \
        "5 Serial" "Enable/Disable shell and kernel messages on the serial connection" \
        "6 1-Wire" "Enable/Disable one-wire interface" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            1\ *) do_ssh ;;
            2\ *) do_vnc ;;
            3\ *) do_spi ;;
            4\ *) do_i2c ;;
            5\ *) do_serial ;;
            6\ *) do_onewire ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60 1
    fi
}

###########################################################
# ADVANCED OPTIONS
###########################################################

do_advanced_options()
{
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Advanced Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60 1
    fi
}

###########################################################
# LAB
###########################################################

do_laboratory()
{
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Laboratory" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Back \
        --ok-button Select \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ]; then
        # Back
        return 0
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case "$OPTION" in
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60 1
    fi
}

###########################################################
# UPDATE
###########################################################

do_update()
{
    whiptail --msgbox "This option is not yet supported." 20 60 1
}

###########################################################
# MAIN MENU
###########################################################

calc_wt_size
while true; do
    OPTION=$(whiptail --title "ODROID Configuration Tool" \
        --backtitle "$DEVICE" \
        --menu "Setup Options" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        --cancel-button Finish \
        --ok-button Select \
        "1 Change User Password" "Change password for the current user" \
        "2 Network Manager" "Configure network settings" \
        "3 Boot Options" "Configure options for start-up" \
        "4 Localisation Options" "Set up language and regional settings to match your location" \
        "5 Interfacing Options" "Configure connections to peripherals" \
        "6 Advanced Options" "Configure advanced settings" \
        "7 Update" "Update this tool to the latest version" \
        "99 Laboratory" "Experimental options" \
        3>&1 1>&2 2>&3)
    BUTTON=$?
    if [ $BUTTON -eq 1 ] || [ $BUTTON -eq 255 ]; then
        # Finish or ESC
        do_finish
    elif [ $BUTTON -eq 0 ]; then
        # Select
        case $OPTION in
            1\ *) do_change_user_password ;;
            2\ *) nmtui ;;
            3\ *) do_boot_options ;;
            4\ *) do_localisation_options ;;
            5\ *) do_interfacing_options ;;
            6\ *) do_advanced_options ;;
            7\ *) do_update ;;
            99\ *) do_laboratory ;;
            *) whiptail --msgbox "Programmer error: unrecognized option" 20 60 1 ;;
        esac || whiptail --msgbox "There was an error running option $OPTION" 20 60 1
    else
        exit 1
    fi
done
